
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
define(['exports', 'react'], function (exports, react) { 'use strict';

	

	function ___$insertStyle(css) {
	  if (!css) {
	    return;
	  }
	  if (typeof window === 'undefined') {
	    return;
	  }

	  var style = document.createElement('style');

	  style.setAttribute('type', 'text/css');
	  style.innerHTML = css;
	  document.head.appendChild(style);
	  return css;
	}

	function createCommonjsModule(fn, basedir, module) {
		return module = {
			path: basedir,
			exports: {},
			require: function (path, base) {
				return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
			}
		}, fn(module, module.exports), module.exports;
	}

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
	}

	var classnames = createCommonjsModule(function (module) {
	/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/

	/* global define */
	(function () {

	  var hasOwn = {}.hasOwnProperty;

	  function classNames() {
	    var classes = [];

	    for (var i = 0; i < arguments.length; i++) {
	      var arg = arguments[i];
	      if (!arg) continue;
	      var argType = typeof arg;

	      if (argType === 'string' || argType === 'number') {
	        classes.push(arg);
	      } else if (Array.isArray(arg) && arg.length) {
	        var inner = classNames.apply(null, arg);

	        if (inner) {
	          classes.push(inner);
	        }
	      } else if (argType === 'object') {
	        for (var key in arg) {
	          if (hasOwn.call(arg, key) && arg[key]) {
	            classes.push(key);
	          }
	        }
	      }
	    }

	    return classes.join(' ');
	  }

	  if ( module.exports) {
	    classNames.default = classNames;
	    module.exports = classNames;
	  } else {
	    window.classNames = classNames;
	  }
	})();
	});

	const Alert = ({
	  className,
	  bootstrapStyle,
	  children
	}) => react.Children.count(children) > 0 ? react.createElement("div", {
	  className: classnames(`alert alert-${bootstrapStyle}`, className)
	}, children) : null;
	Alert.displayName = "Alert";

	var FormatterType;

	(function (FormatterType) {
	  FormatterType["Number"] = "number";
	  FormatterType["DateTime"] = "datetime";
	})(FormatterType || (FormatterType = {}));

	function useOnClickOutside(ref, handler) {
	  react.useEffect(() => {
	    const listener = event => {
	      if (!ref.current || ref.current.contains(event.target)) {
	        return;
	      }

	      handler();
	    };

	    document.addEventListener("mousedown", listener);
	    document.addEventListener("touchstart", listener);
	    return () => {
	      document.removeEventListener("mousedown", listener);
	      document.removeEventListener("touchstart", listener);
	    };
	  }, [ref, handler]);
	}

	function getSortDispatcher() {
	  return window["com.mendix.widgets.web.sortable.sortContext"];
	}

	function SortComponent(props) {
	    var _a, _b, _c, _d, _e, _f;
	    const [valueInput, setValueInput] = react.useState((_c = (_b = (_a = props.defaultOption) === null || _a === void 0 ? void 0 : _a.caption) !== null && _b !== void 0 ? _b : props.emptyOptionCaption) !== null && _c !== void 0 ? _c : "");
	    const [selectedSort, setSelectedSort] = react.useState((_d = props.defaultOption) !== null && _d !== void 0 ? _d : {
	        caption: (_e = props.emptyOptionCaption) !== null && _e !== void 0 ? _e : "",
	        value: ""
	    });
	    const [show, setShow] = react.useState(false);
	    const [dropdownWidth, setDropdownWidth] = react.useState(0);
	    const componentRef = react.useRef(null);
	    const onClick = react.useCallback((option) => {
	        setValueInput(option.caption);
	        setSelectedSort(option);
	        setShow(false);
	    }, []);
	    useOnClickOutside(componentRef, () => setShow(false));
	    react.useEffect(() => {
	        var _a;
	        if (selectedSort) {
	            (_a = props.updateSort) === null || _a === void 0 ? void 0 : _a.call(props, selectedSort);
	        }
	    }, [selectedSort]);
	    const showPlaceholder = !selectedSort || valueInput === props.emptyOptionCaption;
	    return (react.createElement("div", { className: "dropdown-container", "data-focusindex": (_f = props.tabIndex) !== null && _f !== void 0 ? _f : 0, ref: componentRef },
	        react.createElement("input", { value: !showPlaceholder ? valueInput : "", placeholder: showPlaceholder ? props.emptyOptionCaption : undefined, className: "form-control dropdown-triggerer", onClick: () => setShow(true), onFocus: () => setShow(true), "aria-haspopup": true, ref: inputRef => {
	                if (inputRef && inputRef.clientWidth) {
	                    setDropdownWidth(inputRef.clientWidth);
	                }
	            }, "aria-expanded": show, "aria-controls": `${props.name}-dropdown-list`, "aria-label": props.ariaLabel }),
	        show && (react.createElement("ul", { id: `${props.name}-dropdown-list`, className: "dropdown-list", style: { width: dropdownWidth }, role: "menu", "data-focusindex": 0 }, props.options.map((option, index) => (react.createElement("li", { className: classnames({
	                "filter-selected": (selectedSort === null || selectedSort === void 0 ? void 0 : selectedSort.value) === option.value
	            }), key: index, onClick: () => onClick(option), onKeyDown: e => {
	                if (e.key === "Enter" || e.key === " ") {
	                    e.preventDefault();
	                    onClick(option);
	                }
	            }, role: "menuitem", tabIndex: 0 },
	            react.createElement("div", { className: "filter-label" }, option.caption))))))));
	}

	function DropdownSort(props) {
	    var _a, _b, _c, _d;
	    const SortContext = getSortDispatcher();
	    const alertMessage = (react.createElement(Alert, { bootstrapStyle: "danger" }, "The Drop-down sort widget must be placed inside the header of the Gallery widget."));
	    if (!SortContext) {
	        return alertMessage;
	    }
	    const sortContextValue = react.useContext(SortContext);
	    if (!sortContextValue || !sortContextValue.sortDispatcher || !sortContextValue.attributes) {
	        return alertMessage;
	    }
	    const { sortDispatcher, attributes, initialSort } = sortContextValue;
	    let defaultValue;
	    const options = react.useMemo(() => {
	        var _a, _b, _c;
	        return [
	            {
	                caption: (_b = (_a = props.emptyOptionCaption) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : "",
	                value: ""
	            },
	            ...((_c = attributes === null || attributes === void 0 ? void 0 : attributes.map(attribute => ({ caption: attribute.caption, value: attribute.attribute.id }))) !== null && _c !== void 0 ? _c : [])
	        ];
	    }, [attributes, (_a = props.emptyOptionCaption) === null || _a === void 0 ? void 0 : _a.value]);
	    if (initialSort && initialSort.length > 0) {
	        // Keeping the code in order to implement a future multi-sorting
	        const [sort] = initialSort;
	        const [id] = sort;
	        if (id) {
	            defaultValue = options.find(option => option.value === String(id));
	        }
	    }
	    return (react.createElement(SortComponent, { key: (_b = defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.value) !== null && _b !== void 0 ? _b : "sort-component", ariaLabel: (_c = props.ariaLabel) === null || _c === void 0 ? void 0 : _c.value, defaultOption: defaultValue, emptyOptionCaption: (_d = props.emptyOptionCaption) === null || _d === void 0 ? void 0 : _d.value, name: props.name, options: options, tabIndex: props.tabIndex, updateSort: react.useCallback((value) => {
	            const filteredOption = attributes.find(attr => attr.attribute.id === value.value);
	            sortDispatcher({
	                getSortCondition: () => getSortCondition(filteredOption === null || filteredOption === void 0 ? void 0 : filteredOption.attribute, props.sortOrder, value)
	            });
	        }, [attributes, props.sortOrder, sortDispatcher]) }));
	}
	function getSortCondition(listAttribute, direction, value) {
	    if (!listAttribute || !listAttribute.sortable || !value) {
	        return undefined;
	    }
	    const { id } = listAttribute;
	    return [id, direction];
	}

	exports.DropdownSort = DropdownSort;

	Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
